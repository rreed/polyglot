/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Usage: rustc 12.rs; ./12

Author's note: This probably isn't idiomatic Rust, being the first Rust I've ever written. :)
*/

// find the number of factors of n
fn num_factors(n: u32) -> u32 {
    let mut tmp:u32 = n;
    if tmp % 2 == 0 {
        tmp /= 2;
    }

    let mut divisors:u32 = 1;
    let mut count:u32 = 0;

    while tmp % 2 == 0 {
        count += 1;
        tmp /= 2;
    }
    divisors = divisors * (count+1);
    let mut p:u32 = 3;
    while tmp != 1 {
        count = 0;
        while tmp % p == 0 {
            count += 1;
            tmp /= p;
        }
        divisors = divisors * (count+1);
        p += 2;
    }

    return divisors;
}

// return the position of the triangle number with `max` factors
fn nth_triangle(max: u32) -> u32 {
    let mut n = 1;
    let mut left:u32 = num_factors(n);
    let mut right:u32 = num_factors(n+1);
    
    // we're looking for two consecutive numbers where num_factors(n) * num_factors(n+1) > our limit of factors
    while left * right < max {
        n += 1;
        left = right;
        right = num_factors(n+1);
    }
    return n;
}

fn main() {
    let index = nth_triangle(500);
    let result = (index * (index+1)) / 2; // triangle number n == sum(1..n)
    println!("{}", result);
}
